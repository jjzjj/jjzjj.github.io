<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker容器编译原版OpenWrt固件</title>
    <url>/2022/07/02/docker-make-openwrt/</url>
    <content><![CDATA[<ul>
<li><p>拉取</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull openwrtorg/imagebuilder</span><br></pre></td></tr></table></figure></li>
<li><p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull openwrtorg/imagebuilder:x86_64-22.03-SNAPSHOT</span><br></pre></td></tr></table></figure>
</li>
<li><blockquote><p>给bin目录赋予权限，不然在Docker容器里面会提示没有权限，容器里面make的时候不能用sudo权限，不然也会编译错误。</p>
<footer><strong>解决在Docker容器中make权限不足</strong><cite><a href="https://github.com/openwrt/docker/issues/43">github.com/openwrt/docker/issues/43</a></cite></footer></blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> public</span><br><span class="line"><span class="built_in">chown</span> -R 1000:1000 public</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入Docker容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run --<span class="built_in">rm</span> -v <span class="string">&quot;<span class="subst">$(pwd)</span>&quot;</span>/public/:/home/build/openwrt/bin -it openwrtorg/imagebuilder</span><br></pre></td></tr></table></figure></li>
<li><p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run --<span class="built_in">rm</span> -v <span class="string">&quot;<span class="subst">$(pwd)</span>&quot;</span>/public/:/home/build/openwrt/bin -it openwrtorg/imagebuilder:x86_64-22.03-SNAPSHOT</span><br></pre></td></tr></table></figure>
</li>
<li><p>开始编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make image</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译完成</p>
<img src='1.png' width='80%' title='编译完成'></li>
</ul>
]]></content>
      <categories>
        <category>NAS</category>
        <category>OpenWrt</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>OpenWrt</tag>
      </tags>
  </entry>
  <entry>
    <title>ipsec vpn</title>
    <url>/2022/07/01/ipsec-vpn/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>隐匿隧道</category>
        <category>IPSec VPN</category>
      </categories>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2022/07/02/linux-command/</url>
    <content><![CDATA[<p>查看文件夹大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> -h</span><br></pre></td></tr></table></figure>
<p>压缩文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -czf filename.tar.gz *</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>在OpenWrt软路由自定义OpenVPN配置文件</title>
    <url>/2022/06/30/openvpn-config-custom-in-openwrt/</url>
    <content><![CDATA[<blockquote><p>官方的openwrt原版固件里面可以直接上传openvpn配置文件，但是我在第三方的固件里面没看到有这个功能，只能手动输入openvpn的配置，但是我不管怎么输，老出错没有成功的。后面我就直接将配置文件上传到openwrt里面调用，就可以了，ui界面原理上也是这样调用。</p>
</blockquote>

<h2 id="一键脚本搭建OpenVPN服务端"><a href="#一键脚本搭建OpenVPN服务端" class="headerlink" title="一键脚本搭建OpenVPN服务端"></a>一键脚本搭建OpenVPN服务端</h2><h3 id="方法一：Nyr-x2F-openvpn-install"><a href="#方法一：Nyr-x2F-openvpn-install" class="headerlink" title="方法一：Nyr&#x2F;openvpn-install"></a>方法一：<a href="https://github.com/Nyr/openvpn-install.git">Nyr&#x2F;openvpn-install</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://git.io/vpn -O openvpn-install.sh &amp;&amp; bash openvpn-install.sh</span><br></pre></td></tr></table></figure>
<h3 id="方法二：angristan-x2F-openvpn-install"><a href="#方法二：angristan-x2F-openvpn-install" class="headerlink" title="方法二：angristan&#x2F;openvpn-install"></a>方法二：<a href="https://github.com/angristan/openvpn-install.git">angristan&#x2F;openvpn-install</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh</span><br><span class="line"><span class="built_in">chmod</span> +x openvpn-install.sh</span><br><span class="line">./openvpn-install.sh</span><br></pre></td></tr></table></figure>
<span id="more"></span> 

<p>生成的.ovpn后缀的配置文件放在当前用户文件夹，文件里面带有证书<br><code>cat /root/name.vpn</code></p>
<h2 id="OpenWrt配置"><a href="#OpenWrt配置" class="headerlink" title="OpenWrt配置"></a>OpenWrt配置</h2><h3 id="上传ovpn文件到软路由"><a href="#上传ovpn文件到软路由" class="headerlink" title="上传ovpn文件到软路由"></a>上传ovpn文件到软路由</h3><p>写入ovpn配置文件信息</p>
<figure class="highlight plaintext"><figcaption><span>name.ovpn</span></figcaption><table><tr><td class="code"><pre><span class="line">vim /etc/config/name.ovpn</span><br></pre></td></tr></table></figure>
<h3 id="修改OpenVPN客户端插件配置"><a href="#修改OpenVPN客户端插件配置" class="headerlink" title="修改OpenVPN客户端插件配置"></a>修改OpenVPN客户端插件配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/config/openvpn</span><br></pre></td></tr></table></figure>
<h3 id="新建VPN节点"><a href="#新建VPN节点" class="headerlink" title="新建VPN节点"></a>新建VPN节点</h3><figure class="highlight plaintext"><figcaption><span>openvpn</span></figcaption><table><tr><td class="code"><pre><span class="line">config openvpn openvpnclient</span><br><span class="line">    option enabled &#x27;1&#x27;</span><br><span class="line">    option config &#x27;/etc/config/name.ovpn&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/openvpn restart</span><br></pre></td></tr></table></figure>
<h3 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/openvpn status</span><br></pre></td></tr></table></figure>
<h3 id="也可以手动加载配置文件，这应该是一次性的"><a href="#也可以手动加载配置文件，这应该是一次性的" class="headerlink" title="也可以手动加载配置文件，这应该是一次性的"></a>也可以手动加载配置文件，这应该是一次性的</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openvpn --config /etc/config/name.ovpn</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>隐匿隧道</category>
        <category>OpenVPN</category>
      </categories>
      <tags>
        <tag>OpenWrt</tag>
        <tag>OpenVPN</tag>
      </tags>
  </entry>
  <entry>
    <title>在Docker容器编译原版OpenWrt PassWall插件</title>
    <url>/2022/07/02/openwrt-build-passwall/</url>
    <content><![CDATA[<h2 id="首次编译"><a href="#首次编译" class="headerlink" title="首次编译"></a>首次编译</h2><ul>
<li>拉取<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull openwrtorg/sdk</span><br></pre></td></tr></table></figure></li>
<li>或<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull openwrtorg/sdk:x86_64-22.03-SNAPSHOT</span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

<ul>
<li><blockquote><p>给bin目录赋予权限，不然在Docker容器里面会提示没有权限，容器里面make的时候不能用sudo权限，不然也会编译错误。</p>
<footer><strong>解决在Docker容器中make权限不足</strong><cite><a href="https://github.com/openwrt/docker/issues/43">github.com/openwrt/docker/issues/43</a></cite></footer></blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> bin</span><br><span class="line"><span class="built_in">chown</span> -R 1000:1000 bin</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入Docker容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run --<span class="built_in">rm</span> -v <span class="string">&quot;<span class="subst">$(pwd)</span>&quot;</span>/bin/:/home/build/openwrt/bin -it openwrtorg/sdk</span><br></pre></td></tr></table></figure></li>
<li><p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run --<span class="built_in">rm</span> -v <span class="string">&quot;<span class="subst">$(pwd)</span>&quot;</span>/bin/:/home/build/openwrt/bin -it openwrtorg/sdk:x86_64-22.03-SNAPSHOT</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加包含passwall的feeds</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;src-git PWpackages https://github.com/xiaorouji/openwrt-passwall.git;packages&quot;</span> &gt;&gt; feeds.conf.default</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;src-git PWluci https://github.com/xiaorouji/openwrt-passwall.git;luci&quot;</span> &gt;&gt; feeds.conf.default</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载feeds源中的软件包源码（在SDK目录下）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./scripts/feeds update -a</span><br></pre></td></tr></table></figure>
</li>
<li><p>在SDK根目录，安装feeds中luci-app-passwall的软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./scripts/feeds install luci-app-passwall</span><br></pre></td></tr></table></figure>
</li>
<li><p>默认组件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make defconfig</span><br></pre></td></tr></table></figure>
</li>
<li><p>调整Open­Wrt系统组件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>
</li>
<li><p>预下载编译所需的软件包，-j后面的数字代表线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make download -j1 V=s</span><br></pre></td></tr></table></figure>
</li>
<li><p>这个是清洁编译4线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make package/luci-app-passwall/&#123;clean,compile&#125; -j4</span><br></pre></td></tr></table></figure>
</li>
<li><p>这个是可以看到具体流程的可以看到错误（推荐首次使用）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make package/luci-app-passwall/compile V=99</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="更新以后再次编译"><a href="#更新以后再次编译" class="headerlink" title="更新以后再次编译"></a>更新以后再次编译</h2><ul>
<li>先清空上次编译的软件包源码，再按着首次编译的步骤再弄一次<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure></li>
<li>如果还是失败可以尝试<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf ./feeds &amp;&amp; <span class="built_in">rm</span> -rf ./tmp</span><br></pre></td></tr></table></figure></li>
<li>更新feeds源中的软件包源码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./scripts/feeds update -a</span><br></pre></td></tr></table></figure></li>
<li>在SDK根目录，安装feeds中luci-app-passwall的软件包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./scripts/feeds install luci-app-passwall</span><br></pre></td></tr></table></figure></li>
<li>默认组件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make defconfig</span><br></pre></td></tr></table></figure></li>
<li>调整Open­Wrt系统组件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="编译成功"><a href="#编译成功" class="headerlink" title="编译成功"></a>编译成功</h2><p>最终还是拿VPS来编译，应该需要全局网络环境才行<br><img src='1.png' width='80%' title='编译成功'></p>
<h2 id="安装PassWall插件"><a href="#安装PassWall插件" class="headerlink" title="安装PassWall插件"></a>安装PassWall插件</h2><p>先更新软件源，移除dnsmasq，安装dnsmasq-full,luci-compat，wget-ssl等依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg remove dnsmasq </span><br><span class="line"><span class="built_in">rm</span> -rf /etc/config/dhcp </span><br><span class="line">opkg install dnsmasq-full wget-ssl ipset iptables-mod-nat-extra openssl-util curl iptables-mod-tproxy iptables-mod-iprange ip-full ip6tables-mod-nat luci-compat coreutils haproxy coreutils unzip coreutils-nohup libuci-lua resolveip</span><br><span class="line">opkg list-upgradable | <span class="built_in">cut</span> -f 1 -d <span class="string">&#x27; &#x27;</span> | xargs opkg upgrade</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>NAS</category>
      </categories>
      <tags>
        <tag>PassWall</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo+Github+Next主题搭建个人博客</title>
    <url>/2022/06/30/post-my-first-hexo-page/</url>
    <content><![CDATA[<blockquote><p>折腾了小半天，总算把简洁的个人博客搭建成功了，一直都想弄一个博客啥的来记录下平时积累的东西，写在txt文本、word离线的容易丢，后面用OneNote记录也蛮方便，移动端有时候要查也行，还支持OCR图片查询，但是折腾排版格式个人觉得很麻烦，搭了很多次wp，搭完进去一看到写东西的界面排版花里胡哨，又不写了，最后还是写在了csdn，结果上次简单写了几句openvpn的命令，审核不过被删了。大多时候还是简单新建一个文本文档记录下，过后就转移到OneNote。在网上查资料的时候，发现Hexo框架+Next主题搭的个人博客网站非常符合自己的需求，界面简洁，使用md语法写在文本上，最后git一提交，而且数据存在本地，又可以在github弄一个项目，又免去了另外购置vps主机和域名。如果不想用xxxx.github.io的域名，也可以替换一个自己购买申请的域名。第一篇就记录下如何以Hexo+Github+Next来搭建的。</p>
</blockquote>

<h2 id="搭建Hexo-Next网站"><a href="#搭建Hexo-Next网站" class="headerlink" title="搭建Hexo+Next网站"></a>搭建Hexo+Next网站</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><a href="https://hexo.io/zh-cn/docs/index.html">Hexo 中文官方文档</a><br><a href="https://theme-next.iissnan.com/getting-started.html">Next 中文官方文档</a></p>
<blockquote><p>如果要搭建的话，还是花几小时从头到尾把官方文档看一遍比较好，首先这些文档比较少，内容也很简单，边实践边摸索，比一上来就搜各种教程要更加有效率。</p>
</blockquote>

<span id="more"></span> 

<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>安装前提：<br><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)<br><a href="http://git-scm.com/">Git</a><br>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>等安装完成，输入<code>hexo -v</code>能查看版本说明安装成功<br>新建网站目录文件夹并安装模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> hexo.github.io</span><br><span class="line"><span class="built_in">cd</span> hexo.github.io</span><br><span class="line">hexo init myweb</span><br><span class="line"><span class="built_in">cd</span> myweb</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>对网站的基本配置，可以查阅<a href="https://hexo.io/zh-cn/docs/configuration">Hexo 中文官方配置文档</a></p>
<figure class="highlight plaintext"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">title: Hexo</span><br><span class="line">subtitle: &#x27;Hexo&#x27;</span><br><span class="line">description: &#x27;Welcome To My Blog&#x27;</span><br><span class="line">keywords:</span><br><span class="line">author: It&#x27;s Me!</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: &#x27;Asia/Shanghai&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="安装Next"><a href="#安装Next" class="headerlink" title="安装Next"></a>安装Next</h3><p>不要用官方文档里面用那个v5.1.4版的，会出现兼容问题打不开网站，去 <a href="https://github.com/theme-next/hexo-theme-next/releases">https://github.com/theme-next/hexo-theme-next/releases</a> 下载v7.8.0版本，解压所下载的压缩包至站点的 themes 目录下，并将解压后的文件夹名称更改为 next。<br>找到 theme 字段，并将其值更改为 next。</p>
<figure class="highlight plaintext"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<p>找到 theme&#x2F;next&#x2F;source&#x2F;_config.yml 修改 language</p>
<figure class="highlight plaintext"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure>
<p>找到 theme&#x2F;next&#x2F;source&#x2F;_config.yml 修改 menu</p>
<figure class="highlight plaintext"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  archives: /archives</span><br><span class="line">  #about: /about</span><br><span class="line">  categories: /categories</span><br><span class="line">  tags: /tags</span><br><span class="line">  #commonweal: /404.html</span><br></pre></td></tr></table></figure>

<h3 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h3><p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;post title with whitespace&quot;</span></span><br></pre></td></tr></table></figure>
<p>生成静态文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
<p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/">http://localhost:4000/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><h3 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h3><p><a href="https://github.com/">GitHub网址</a></p>
<h3 id="申请Token"><a href="#申请Token" class="headerlink" title="申请Token"></a>申请Token</h3><p><a href="https://github.com/settings/tokens">申请Token地址</a> - Generate new token</p>
<img src="/2022/06/30/post-my-first-hexo-page/2.png" class="" title="申请Github Token">

<h3 id="新建repository"><a href="#新建repository" class="headerlink" title="新建repository"></a>新建repository</h3><p><a href="https://github.com/new">点击前往</a></p>
<img src="/2022/06/30/post-my-first-hexo-page/3.png" class="" title="新建repository">

<h3 id="安装hexo-deployer-git"><a href="#安装hexo-deployer-git" class="headerlink" title="安装hexo-deployer-git"></a>安装hexo-deployer-git</h3><p><a href="https://github.com/hexojs/hexo-deployer-git">安装hexo-deployer-git</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>在 _config.yml（如果有已存在的请删除）添加如下配置：</p>
<figure class="highlight plaintext"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/&lt;username&gt;/&lt;project&gt;</span><br><span class="line">  # example, https://github.com/yourgithubname/yourgithubname.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<h3 id="部署发布网站"><a href="#部署发布网站" class="headerlink" title="部署发布网站"></a>部署发布网站</h3><h4 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<h4 id="连接远程仓库"><a href="#连接远程仓库" class="headerlink" title="连接远程仓库"></a>连接远程仓库</h4><p>如果是第一次使用git，在使用git的时候会提示输入用户名和密码，用户名是自己的注册邮箱，密码是申请的Token</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/yourgithubname/yourgithubname.github.io.git</span><br></pre></td></tr></table></figure>
<h4 id="发布Hexo到Github-Page部署网站"><a href="#发布Hexo到Github-Page部署网站" class="headerlink" title="发布Hexo到Github Page部署网站"></a>发布Hexo到Github Page部署网站</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<img src="/2022/06/30/post-my-first-hexo-page/4.png" class="" title="发布部署网站">
<h4 id="访问网站测试"><a href="#访问网站测试" class="headerlink" title="访问网站测试"></a>访问网站测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://yourgithubname.github.io</span><br></pre></td></tr></table></figure>

<h2 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h2><h3 id="中文目录不跳转问题"><a href="#中文目录不跳转问题" class="headerlink" title="中文目录不跳转问题"></a>中文目录不跳转问题</h3><p>修改<code>主题配置文件/source/js.utils.js</code>中从234至251行的代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const sections = [...navItems].map(element =&gt; &#123;</span><br><span class="line">  var link = element.querySelector(&#x27;a.nav-link&#x27;);</span><br><span class="line">  var target = document.getElementById(decodeURI(link.getAttribute(&#x27;href&#x27;)).replace(&#x27;#&#x27;, &#x27;&#x27;));</span><br><span class="line">  // TOC item animation navigate.</span><br><span class="line">  link.addEventListener(&#x27;click&#x27;, event =&gt; &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    //var target = document.getElementById(event.currentTarget.getAttribute(&#x27;href&#x27;).replace(&#x27;#&#x27;, &#x27;&#x27;));</span><br><span class="line">    var offset = target.getBoundingClientRect().top + window.scrollY;</span><br><span class="line">    window.anime(&#123;</span><br><span class="line">      targets  : document.scrollingElement,</span><br><span class="line">      duration : 500,</span><br><span class="line">      easing   : &#x27;linear&#x27;,</span><br><span class="line">      scrollTop: offset + 10</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  //return document.getElementById(link.getAttribute(&#x27;href&#x27;).replace(&#x27;#&#x27;, &#x27;&#x27;));</span><br><span class="line">  return target;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h3><p>在站点目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd themes/next/source/lib</span><br><span class="line">git clone https://github.com/theme-next/theme-next-three</span><br><span class="line">mv theme-next-three three</span><br></pre></td></tr></table></figure>
<p>修改主题配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">three:</span><br><span class="line">  enable: true</span><br><span class="line">  three_waves: false</span><br><span class="line">  canvas_lines: false</span><br><span class="line">  canvas_sphere: true</span><br></pre></td></tr></table></figure>

<h3 id="页面加载的时候顶部添加进度条"><a href="#页面加载的时候顶部添加进度条" class="headerlink" title="页面加载的时候顶部添加进度条"></a>页面加载的时候顶部添加进度条</h3><p>在站点目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd themes/next/source/lib</span><br><span class="line">git clone https://github.com/theme-next/theme-next-pace</span><br><span class="line">mv theme-next-pace pace</span><br></pre></td></tr></table></figure>
<p>修改主题配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pace:</span><br><span class="line">  enable: true</span><br><span class="line">  # Themes list:</span><br><span class="line">  # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span><br><span class="line">  # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span><br><span class="line">  theme: minimal</span><br></pre></td></tr></table></figure>

<h3 id="阅读全文"><a href="#阅读全文" class="headerlink" title="阅读全文"></a>阅读全文</h3><p>在想要隔断的地方添加<code>&lt;!-- more --&gt;</code>，前面显示，后面不显示</p>
<h3 id="本地搜索功能"><a href="#本地搜索功能" class="headerlink" title="本地搜索功能"></a>本地搜索功能</h3><p>在站点的根目录下执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb -save</span><br></pre></td></tr></table></figure>
<p>编辑站点配置文件，新增以下内容，安装完应该就有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<h3 id="添加底部文章推荐功能"><a href="#添加底部文章推荐功能" class="headerlink" title="添加底部文章推荐功能"></a>添加底部文章推荐功能</h3><p>在站点的根目录执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-related-popular-posts -save</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">related_posts:</span><br><span class="line">  enable: true</span><br><span class="line">  title: # Custom header, leave empty to use the default one</span><br><span class="line">  display_in_home: false</span><br><span class="line">  params:</span><br><span class="line">    maxCount: 5</span><br><span class="line">    PPMixingRate: 0.5</span><br><span class="line">    #isDate: false</span><br><span class="line">    #isImage: false</span><br><span class="line">    #isExcerpt: false</span><br></pre></td></tr></table></figure>

<h3 id="自定义文件路径"><a href="#自定义文件路径" class="headerlink" title="自定义文件路径"></a>自定义文件路径</h3><p>主题配置文件<code>custom_file_path</code>部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  #head: source/_data/head.swig</span><br><span class="line">  #header: source/_data/header.swig</span><br><span class="line">  #sidebar: source/_data/sidebar.swig</span><br><span class="line">  #postMeta: source/_data/post-meta.swig</span><br><span class="line">  postBodyEnd: source/_data/post-body-end.swig</span><br><span class="line">  footer: source/_data/footer.swig</span><br><span class="line">  #bodyEnd: source/_data/body-end.swig</span><br><span class="line">  #variable: source/_data/variables.styl</span><br><span class="line">  #mixin: source/_data/mixins.styl</span><br><span class="line">  style: source/_data/styles.styl</span><br></pre></td></tr></table></figure>

<h3 id="主页文章添加阴影效果"><a href="#主页文章添加阴影效果" class="headerlink" title="主页文章添加阴影效果"></a>主页文章添加阴影效果</h3><p>添加以下内容到<code>source/_data/styles.styl</code>需开启自定义文件路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line">.post-block &#123;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h3><blockquote><p>本地测试访问错误页面是没有404的，要绑定域名才行</p>
</blockquote>
<p>新建404页面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;404&quot;</span></span><br></pre></td></tr></table></figure>
<p>修改<code>/source/404/index.md</code>内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#x27;404 Not Found：该页无法显示&#x27;</span><br><span class="line">comments: false</span><br><span class="line">permalink: /404</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;blockquote class=&quot;blockquote-center&quot;&gt;</span><br><span class="line">  &lt;p&gt;&lt;a href=&quot;https://jjzjj.github.io/&quot;&gt;返回首页&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure>

<h3 id="给主题加头像"><a href="#给主题加头像" class="headerlink" title="给主题加头像"></a>给主题加头像</h3><p><a href="https://jingyan.baidu.com/article/d5a880ebeb42f113f147cce5.html">Hexo Next主题如何加头像</a></p>
<h3 id="菜单图标代码"><a href="#菜单图标代码" class="headerlink" title="菜单图标代码"></a>菜单图标代码</h3><p><a href="https://fontawesome.com/v4/icons/">https://fontawesome.com/v4/icons/</a></p>
<h3 id="推荐主题优化配置链接"><a href="#推荐主题优化配置链接" class="headerlink" title="推荐主题优化配置链接"></a>推荐主题优化配置链接</h3><ol>
<li><a href="https://iitii.github.io/2021/05/28/1/">Hexo Next 主题安装、配置及美化</a></li>
<li><a href="http://t.zoukankan.com/Luweir-p-14147343.html">Hexo中Next主题个性化美化的解决方案</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/26625249/">GitHub+Hexo 搭建个人网站详细教程</a></li>
<li><a href="https://godweiyang.com/2018/04/13/hexo-blog/">超详细Hexo+Github博客搭建小白教程</a></li>
<li><a href="https://www.jianshu.com/p/27b971d84f76">Hexo NexT文章阅读量排行（热榜）功能</a></li>
<li><a href="https://www.jianshu.com/p/c7de2ae59975">Hexo-abbrlink生成唯一永久文章链接</a></li>
<li><a href="https://www.jianshu.com/p/3fe88ef479dd">Hexo+Next 添加菜单分类页面</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E8%87%AA%E5%AE%9A%E4%B9%89LOGO%E4%BB%A5%E5%8F%8A%E4%B8%BB%E9%A2%98%E5%9B%BE%E6%A0%87">自定义LOGO以及主题图标</a></li>
</ol>
]]></content>
      <tags>
        <tag>建站</tag>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>SCP命令操作</title>
    <url>/2022/07/02/scp/</url>
    <content><![CDATA[<h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>scp -r -P 端口 &#x2F;本地文件 <a href="mailto:&#x72;&#x6f;&#111;&#x74;&#x40;&#52;&#x34;&#46;&#53;&#x35;&#x2e;&#54;&#x36;&#x2e;&#x37;&#55;">&#x72;&#x6f;&#111;&#x74;&#x40;&#52;&#x34;&#46;&#53;&#x35;&#x2e;&#54;&#x36;&#x2e;&#x37;&#55;</a>:&#x2F;远程文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -r -P 22 /Users/abc/Downloads/filename.zip root@44.55.66.77:/opt</span><br></pre></td></tr></table></figure>

<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>scp -r -P 端口 <a href="mailto:&#114;&#x6f;&#x6f;&#116;&#64;&#52;&#x34;&#46;&#x35;&#53;&#46;&#x36;&#54;&#x2e;&#55;&#55;">&#114;&#x6f;&#x6f;&#116;&#64;&#52;&#x34;&#46;&#x35;&#53;&#46;&#x36;&#54;&#x2e;&#55;&#55;</a>:&#x2F;远程文件 &#x2F;本地文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -r -P 22 root@44.55.66.77:/root/bin/packages/x86_64/PWluci/luci-app-passwall_4.54_all.ipk /Users/abc/luci-app-passwall_4.54_all.ipk</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -r -P 22 root@44.55.66.77:/root/bin/packages/x86_64/PWluci/luci-i18n-passwall-zh-cn_git-22.181.67929-152cc63_all.ipk /Users/abc/luci-i18n-passwall-zh-cn_git-22.181.67929-152cc63_all.ipk</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>SCP</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu 20.04安装Docker</title>
    <url>/2022/07/01/ubuntu-install-docker/</url>
    <content><![CDATA[<p>使用<code>apt update</code>更新软件包索引，接着使用<code>apt remove</code>移除旧版本的docker。<br>然后使用curl命令导入docker存储库的GPG密钥。使用<code>add-apt-repository</code>将Docker APT存储库添加到系统。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">&quot;EOF&quot;</span> | bash                              </span><br><span class="line">sudo apt update &amp;&amp; \</span><br><span class="line">sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y &amp;&amp; \</span><br><span class="line">sudo apt-get remove docker  docker.io containerd runc -y &amp;&amp; \</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - &amp;&amp; \</span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> &amp;&amp; \</span><br><span class="line">sudo apt update &amp;&amp; \</span><br><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io -y</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>没有sudo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">&quot;EOF&quot;</span> | bash                              </span><br><span class="line">apt update &amp;&amp; \</span><br><span class="line">apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y &amp;&amp; \</span><br><span class="line">apt-get remove docker  docker.io containerd runc -y &amp;&amp; \</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - &amp;&amp; \</span><br><span class="line">add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> &amp;&amp; \</span><br><span class="line">apt update &amp;&amp; \</span><br><span class="line">apt install docker-ce docker-ce-cli containerd.io -y</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>当发布新版本的Docker时，Docker都会随着系统更新而升级，当然您可以手动运行<code>sudo apt update &amp;&amp; sudo apt upgrade</code>来更新&#x2F;升级docker。<br>使用systemctl来检查Docker服务的状态来以Docker是否正确的安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Gost搭建加密隧道转发V2ray流量</title>
    <url>/2022/06/30/use-gost-build-encrypted-tunnel/</url>
    <content><![CDATA[<blockquote><p>GO Simple Tunnel，GO语言实现的安全隧道</p>
</blockquote>

<p><a href="https://v2.gost.run/">官方文档</a><br><a href="https://github.com/ginuerzh/gost.git">GitHub项目地址</a></p>
<h2 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h2><p>多端口监听<br>可设置转发代理，支持多级转发(代理链)<br>支持标准HTTP&#x2F;HTTPS&#x2F;HTTP2&#x2F;SOCKS4(A)&#x2F;SOCKS5代理协议<br>Web代理支持探测防御<br>SOCKS5代理支持TLS协商加密<br>支持多种隧道类型<br>Tunnel UDP over TCP<br>本地&#x2F;远程TCP&#x2F;UDP端口转发<br>TCP&#x2F;UDP透明代理<br>支持Shadowsocks(TCP&#x2F;UDP)协议<br>支持SNI代理<br>权限控制<br>负载均衡<br>路由控制<br>DNS解析和代理<br>TUN&#x2F;TAP设备</p>
<span id="more"></span>

<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>二进制文件<br><a href="https://github.com/ginuerzh/gost/releases">https://github.com/ginuerzh/gost/releases</a></p>
<p>源码编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ginuerzh/gost.git</span><br><span class="line"><span class="built_in">cd</span> gost/cmd/gost</span><br><span class="line">go build</span><br></pre></td></tr></table></figure>
<p>Docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull ginuerzh/gost</span><br></pre></td></tr></table></figure>
<p>Ubuntu Store</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo snap install core</span><br><span class="line">sudo snap install gost</span><br></pre></td></tr></table></figure>

<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="用Gost对V2ray的流量进行转发"><a href="#用Gost对V2ray的流量进行转发" class="headerlink" title="用Gost对V2ray的流量进行转发"></a>用Gost对V2ray的流量进行转发</h3><h4 id="落地机（V2ray服务端）"><a href="#落地机（V2ray服务端）" class="headerlink" title="落地机（V2ray服务端）"></a>落地机（V2ray服务端）</h4><p>带验证密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gost -L=<span class="string">&quot;relay+mtls://username:password@:监听本地端口/127.0.0.1:V2ray端口&quot;</span></span><br></pre></td></tr></table></figure>
<p>不带验证密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gost -L=<span class="string">&quot;relay+mtls://监听本地端口/127.0.0.1:V2ray端口&quot;</span></span><br></pre></td></tr></table></figure>
<p>使用证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gost -L=<span class="string">&quot;relay+mtls://username:password@:监听本地端口/127.0.0.1:V2ray端口?cert=./cert.pem&amp;key=./key.pem&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="中转机"><a href="#中转机" class="headerlink" title="中转机"></a>中转机</h4><p>带验证密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gost -L=udp://:6688 -L=tcp://:6688 -F=<span class="string">&quot;relay+mtls://username:password@V2ray服务器IP:V2ray监听端口?mbind=true&quot;</span></span><br></pre></td></tr></table></figure>
<p>不带验证密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gost -L=udp://:6688 -L=tcp://:6688 -F=<span class="string">&quot;relay+mtls://V2ray服务器IP:V2ray监听端口?mbind=true&quot;</span></span><br></pre></td></tr></table></figure>
<p>使用证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gost -L=udp://:6688 -L=tcp://:6688 -F=<span class="string">&quot;relay+mtls://username:password@V2ray服务器IP:V2ray监听端口?mbind=true&amp;cert=./cert.pem&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>将V2ray的客户端中服务器地址换成中转机的IP及中转机监听的端口6688</p>
<h4 id="使用screen命令开启后台运行"><a href="#使用screen命令开启后台运行" class="headerlink" title="使用screen命令开启后台运行"></a>使用screen命令开启后台运行</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -S name <span class="comment">#新建一个name的session</span></span><br><span class="line">screen -<span class="built_in">ls</span> <span class="comment">#列出当前所有session</span></span><br><span class="line">screen -r name <span class="comment">#回到name的session</span></span><br><span class="line">screen -d name <span class="comment">#后台运行name的session ctrl + A + D</span></span><br><span class="line">screen -d -r name <span class="comment">#结束当前session并进入name的session</span></span><br></pre></td></tr></table></figure>
<p>后台运行在命令前面加<code>screen -dm -S gost</code><br>下次访问输入命令<code>screen -r gost</code></p>
<h3 id="用Gost对V2ray的流量不加密转发"><a href="#用Gost对V2ray的流量不加密转发" class="headerlink" title="用Gost对V2ray的流量不加密转发"></a>用Gost对V2ray的流量不加密转发</h3><h4 id="落地机"><a href="#落地机" class="headerlink" title="落地机"></a>落地机</h4><p>不用配置</p>
<h4 id="中转机-1"><a href="#中转机-1" class="headerlink" title="中转机"></a>中转机</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gost -L=tcp://:443/V2ray服务器IP:V2ray端口 -L=udp://:443/V2ray服务器IP:V2ray端口</span><br></pre></td></tr></table></figure>

<h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><p>将V2ray的客户端中服务器地址换成中转机的IP及中转机监听的端口443</p>
]]></content>
      <categories>
        <category>隐匿隧道</category>
        <category>Gost</category>
      </categories>
      <tags>
        <tag>加密隧道</tag>
        <tag>Gost</tag>
        <tag>TCP</tag>
        <tag>UDP</tag>
      </tags>
  </entry>
  <entry>
    <title>Xray+TLS+WS搭建VMESS、VLESS、KCP等隐匿隧道</title>
    <url>/2022/07/01/x-ui-tls-ws/</url>
    <content><![CDATA[<blockquote><p>用这个方法也可以解决IP地址被封的问题，前提是能连接VPS的SSH，用梯子或者用主机厂商的Web SSH就行，虽然有时候不能复制粘贴得一个个手敲。</p>
</blockquote>

<h2 id="安装X-ui面板"><a href="#安装X-ui面板" class="headerlink" title="安装X-ui面板"></a>安装X-ui面板</h2><p><a href="https://github.com/vaxilu/x-ui">GitHub官方项目</a></p>
<h3 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</span><br></pre></td></tr></table></figure>

<h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><ol>
<li>首先从 <a href="https://github.com/vaxilu/x-ui/releases">https://github.com/vaxilu/x-ui/releases</a> 下载最新的压缩包，一般选择 amd64架构</li>
<li>然后将这个压缩包上传到服务器的 &#x2F;root&#x2F;目录下，并使用 root用户登录服务器<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/</span><br><span class="line"><span class="built_in">rm</span> x-ui/ /usr/local/x-ui/ /usr/bin/x-ui -rf</span><br><span class="line">tar zxvf x-ui-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">chmod</span> +x x-ui/x-ui x-ui/bin/xray-linux-* x-ui/x-ui.sh</span><br><span class="line"><span class="built_in">cp</span> x-ui/x-ui.sh /usr/bin/x-ui</span><br><span class="line"><span class="built_in">cp</span> -f x-ui/x-ui.service /etc/systemd/system/</span><br><span class="line"><span class="built_in">mv</span> x-ui/ /usr/local/</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> x-ui</span><br><span class="line">systemctl restart x-ui</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>

<h3 id="修改登录端口及管理用户名密码"><a href="#修改登录端口及管理用户名密码" class="headerlink" title="修改登录端口及管理用户名密码"></a>修改登录端口及管理用户名密码</h3><p>调出管理命令菜单<code>x-ui</code>根据显示的命令进行操作</p>
<img src='1.png' width='65%' title='X-ui面板命令菜单'>

<h3 id="登陆X-ui后台"><a href="#登陆X-ui后台" class="headerlink" title="登陆X-ui后台"></a>登陆X-ui后台</h3><p>访问<code>http://vps_ip:面板端口</code></p>
<h2 id="注册域名"><a href="#注册域名" class="headerlink" title="注册域名"></a>注册域名</h2><ol>
<li>白嫖的<br>免费的域名注册 <a href="https://freenom.com/">https://freenom.com/</a> ，这个注册很讲究，没有直接注册页面，需要先选择域名，再接下来的加入购物车用邮箱验证来注册。使用gmail邮箱，注册信息地址与IP对应，安装chrome插件后，才注册成功。</li>
<li>剁手的<br>收费的域名注册 <a href="https://www.namesilo.com/">https://www.namesilo.com/</a></li>
</ol>
<h2 id="CloudFlare"><a href="#CloudFlare" class="headerlink" title="CloudFlare"></a>CloudFlare</h2><h3 id="注册CloudFlare"><a href="#注册CloudFlare" class="headerlink" title="注册CloudFlare"></a>注册CloudFlare</h3><p>访问 <a href="https://www.cloudflare.com/">https://www.cloudflare.com/</a> 注册账号并登录</p>
<h3 id="添加网站"><a href="#添加网站" class="headerlink" title="添加网站"></a>添加网站</h3><ol>
<li>添加注册的域名</li>
<li>要使用Cloudflare，请确保已更改权威DNS服务器或名称服务器。这些服务器是分配的Cloudflare名称服务器。将两个格式为 <code>*.ns.cloudflare.com</code> 的Cloudflare名称服务器添加到注册域名的NameServers。以freenom为例，如下图：</li>
</ol>
<img src="/2022/07/01/x-ui-tls-ws/2.png" class="" title="更改NameServers">

<h3 id="创建A、AAAA记录"><a href="#创建A、AAAA记录" class="headerlink" title="创建A、AAAA记录"></a>创建A、AAAA记录</h3><p>DNS - 添加记录，A记录对应ipv4地址，AAAA记录对应ipv6地址</p>
<img src="/2022/07/01/x-ui-tls-ws/4.png" class="" title="添加DNS记录">

<h3 id="创建客户端证书"><a href="#创建客户端证书" class="headerlink" title="创建客户端证书"></a>创建客户端证书</h3><blockquote><p>如果DNS记录里面设置的为<em>已代理</em>，那么用到的证书就是CloudFlare这里生成的。</p>
</blockquote>
<p>在SSL&#x2F;TLS里面设置加密模式为<em>完全</em></p>
<img src="/2022/07/01/x-ui-tls-ws/7.png" class="" title="设置加密模式">

<p>点击CloudFlare中添加的域名网站 - SSL&#x2F;TLS - 客户端证书 - 创建</p>
<img src="/2022/07/01/x-ui-tls-ws/3.png" class="" title="创建客户端证书">

<p>保存生成的客户端证书、私钥</p>
<img src="/2022/07/01/x-ui-tls-ws/5.png" class="" title="生成的客户端证书">

<h2 id="配置V2ray服务"><a href="#配置V2ray服务" class="headerlink" title="配置V2ray服务"></a>配置V2ray服务</h2><p>进入X-ui面板后台，入站列表 - “ + ”新增节点，填入各项信息，粘贴在CloudFlare生成的证书和私钥。添加完成后，点击“查看” - “复制链接”导入到V2ray客户端即可使用</p>
<img src='6.png' width='50%' title='新增节点'>

<p>除了VMESS，还可以添加其它协议的节点。</p>
<h2 id="提速CDN"><a href="#提速CDN" class="headerlink" title="提速CDN"></a>提速CDN</h2><p><a href="https://github.com/XIU2/CloudflareSpeedTest">https://github.com/XIU2/CloudflareSpeedTest</a></p>
]]></content>
      <categories>
        <category>隐匿隧道</category>
        <category>V2ray</category>
      </categories>
      <tags>
        <tag>V2ray</tag>
        <tag>Xray</tag>
        <tag>CloudFlare</tag>
        <tag>TLS</tag>
        <tag>隐匿隧道</tag>
      </tags>
  </entry>
</search>
